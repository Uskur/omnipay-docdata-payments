<?php

namespace Omnipay\DocdataPayments\Message;

use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RedirectResponseInterface;

/**
 * Create Request Response
 */
class CreateResponse extends AbstractResponse implements RedirectResponseInterface
{
    protected $liveRedirectEndpoint = 'https://secure.docdatapayments.com/ps/menu';
    protected $testRedirectEndpoint = 'https://test.docdatapayments.com/ps/menu';

    /**
     * Is the response successful?
     *
     * @return boolean
     */
    public function isSuccessful()
    {
        return isset($this->data->createSuccess) && $this->data->createSuccess->success->code === 'SUCCESS';
    }

    /**
     * Response Message
     *
     * @return null|string A response message from the payment gateway
     */
    public function getMessage()
    {
        if ($this->isSuccessful()) {
            return $this->data->createSuccess->success->_;
        }

        return $this->data->createErrors->error->_;
    }

    /**
     * Does the response require a redirect?
     * The createResponse is always a redirect if the request succeeded.
     *
     * @return boolean
     */
    public function isRedirect()
    {
        return $this->isSuccessful();
    }

    /**
     * Gets the redirect target url.
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        /**
         * The request for creation
         *
         * @var CreateRequest $request
         */
        $request = $this->getRequest();

        $queryParameters = array(
            'payment_cluster_key' => $this->getTransactionReference(),
            'merchant_name' => $request->getMerchantName(),
            'return_url_success' => $request->getReturnUrl(),
            'return_url_canceled' => $request->getCancelUrl(),
            'return_url_pending' => $request->getPendingUrl(),
            'return_url_error' => $request->getCancelUrl(),
            'client_language' => $request->getLanguage(),
        );

        $queryString = http_build_query($queryParameters);

        return $this->getRedirectEndpoint(). '?' . $queryString;
    }

    /**
     * Get a reference provided by the gateway to represent this transaction
     *
     * @return null|string
     */
    public function getTransactionReference()
    {
        return $this->data->createSuccess->key ?? null;
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        /**
         * The request for creation
         *
         * @var CreateRequest $request
         */
        $request = $this->getRequest();

        if (empty($request->getTransactionId())) {
            return null;
        }

        return $request->getTransactionId();
    }

    /**
     * Get the required redirect method (either GET or POST).
     *
     * @return string
     */
    public function getRedirectMethod()
    {
        return 'GET';
    }

    /**
     * Gets the redirect form data array, if the redirect method is POST.
     *
     * @return array
     */
    public function getRedirectData()
    {
        return [];
    }

    /**
     * Get the location where we can send the user. Needs a query string
     *
     * @see getRedirectUrl
     *
     * @return string
     */
    private function getRedirectEndpoint(): string
    {
        $parameters = $this->getRequest()->getParameters();
        if ($parameters['testMode'] === true) {
            return $this->testRedirectEndpoint;
        }

        return $this->liveRedirectEndpoint;
    }
}
